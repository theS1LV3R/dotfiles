#!/usr/bin/env bash
# shellcheck shell=bash
# vi: ft=bash:ts=4:sw=4

# shellcheck source=executable___common.sh
source "$HOME/.local/bin/__common.sh"

usage() {
    cat <<EOF
Decode a JWT string to its parameters in JSON format. It can take the JWT string as a
command-line argument or read it from stdin.

USAGE
    $0 [OPTIONS] [JWT_STRING]

OPTIONS
    --help      Display this help message and exit.

ARGUMENTS
    JWT_STRING  The JWT string to be decoded.

EXAMPLES
    $ JWT="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    $ echo "\$JWT" | jwt # Can also be called as \`jwt "\$JWT"\` or \`jwt <<<"\$JWT\`
    Header
    {
        "alg": "HS256",
        "typ": "JWT"
    }

    Body
    {
        "sub": "1234567890",
        "name": "John Doe",
        "iat": 1516239022
    }

    Signature
    SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

    $ JWT="eyJhbGciOiJIUzI1NiJ9.U29tZSB0ZXh0IGNvbnRlbnQ.GINjdaDvhf8lOuSztBUFUxvMd72HBxCAY-gbqbki2nY"
    $ jwt <<<"\$JWT"
    Header
    {
    "alg": "HS256"
    }

    Body
    Warning: Body does not seem to be valid json, outputting raw
    U29tZSB0ZXh0IGNvbnRlbnQ

    Signature
    GINjdaDvhf8lOuSztBUFUxvMd72HBxCAY-gbqbki2nY
EOF
}

case "${1:-}" in
-h | --help)
    usage
    exit 0
    ;;
*) ;;
esac

if [[ $# -ne 0 ]]; then
    input="$1"
else
    input=$(cat /dev/stdin)
fi

if [[ -z "${input:-}" ]]; then
    echo "Missing input"
    exit 1
fi

echo "$input"

orig_ifs=$IFS
IFS=$'.' read -ra parts <<<"$input"
IFS=$orig_ifs

if [[ "${#parts[@]}" -ne 3 ]]; then
    echo "Input does not seem to be a valid JWT (parts != 3; parts == ${#parts[@]})"
    exit 2
fi

header="${parts[0]}"
body="${parts[1]}"
signature="${parts[2]}"

echo -e "${BOLD}Header${NC}"

echo "$header" | jq -R '. | @base64d | fromjson' 2>/dev/null || {
    echo -e "${RED}Warning:${NC} Header does not seem to be valid json, outputting raw"
    echo "$header"
}

echo -e "\n${BOLD}Body${NC}"

echo "$body" | jq -R '. | @base64d | fromjson' 2>/dev/null || {
    echo -e "${RED}Warning:${NC} Body does not seem to be valid json, outputting raw"
    echo "$body"
}

echo -e "\n${BOLD}Signature${NC}"
echo "$signature"
